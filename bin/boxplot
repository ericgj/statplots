#!/usr/bin/env node

'use strict';

var program = require('commander');
var d3 = require('d3-dsv');
var prop = require('ramda/src/prop');
var allPass = require('ramda/src/allPass');
var complement = require('ramda/src/complement');
var T = require('ramda/src/T');

var ascii = require('../plot/ascii');

var rangeOption = function(val){
  return val.split('..').map(Number);
}

var listOption = function(val){
  return val.split(',').map(function(s){ return s.trim(); });
}

program.version('0.0.1')
       .option('-f, --format [type]', 'Input format [csv]', 'csv')
       .option('-o, --output [type]', 'Output format [ascii]', 'ascii')
       .option('-x, --x [name]',     'x (category) variable')
       .option('-y, --y [name]',     'y (numeric) variable')
       .option('--yrange [min]..[max]', 'y range', rangeOption)
       .option('--xs [level],[level]', 'include x levels', listOption)
       .option('--not-xs [level],[level]', 'exclude x levels', listOption)
       .parse(process.argv);

// TODO halt if no x or y given

/*
console.log('x: ' + program.x);
console.log('y: ' + program.y);
console.log('yrange: %j', program.yrange);
console.log('xs: %j', program.xs);
console.log('notXs: %j', program['notXs']);
*/

var parser = {
  'csv': d3.csv
}[program.format];

var plot = {
  'ascii': ascii
}[program.output];

var inputChunks = [];

process.stdin.on('readable', readInput);
process.stdin.on('end', processInput);

function readInput(){
  var chunk = process.stdin.read();
  if (chunk != null){
    inputChunks.push(chunk);
  }
}

function processInput(){
  var propx = prop(program.x);
  var propy = prop(program.y);
  var dataFilter = allPass([ 
                     scrub([propy]),
                     program.yrange ? filterRange(program.yrange,propy) : T,
                     program.xs     ? filterList(program.xs,propx)      : T,
                     program['notXs'] ? 
                       complement(filterList(program['notXs'],propx))   : T 
                   ]);
  var data  = (
    parser.parse(inputChunks.join(''), 
                 coerce(program.x,program.y))
          .filter(dataFilter)
  );

  var out = plot({}, propx, propy, data);
  out.forEach( function(line){
    process.stdout.write(line);
    process.stdout.write("\n");
  });
}


function coerce(x,y){
  return function(d){
    var ret = {};
    ret[x] = d[x];
    ret[y] = d[y].length == 0 ? undefined : +d[y] ;
    return ret;
  }
}

function filterRange(r,fn){
  return function(rec){
    var v = fn(rec);
    return v >= r[0] && v <= r[1];
  }
}

function filterList(list,fn){
  return function(rec){
    var v = fn(rec);
    return list.indexOf(v) >= 0;
  }
}


// note this is needed to play nice with simple-statistics

function scrub(fns){
  return function(rec){
    return fns.every( function(fn){
      var v = fn(rec);
      return !( v === undefined || v === null || 
                v === NaN || v === +Infinity || v === -Infinity );
    });
  }
}

